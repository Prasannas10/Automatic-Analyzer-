import streamlit as st
from sklearn import datasets
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.decomposition import PCA

import pandas_profiling
from streamlit_pandas_profiling import st_profile_report
from pandas_profiling import ProfileReport

#writing heading of the app
st.title("Classifier Visulisation")

st.write("""
# explorer different classifire
""")

#creating side bar for selecting

dataset_name=st.sidebar.selectbox("select data set",("Iris Dataset","Diabetes DAataset","Breast Canser Dataset","Wine Dataset"))

classifier_name=st.sidebar.selectbox("select classifier",("KNN","SVM","Random Forest"))

#loading selected clasifier by user

def get_dataset(dataset_name):
    if(dataset_name=="Diabetes DAataset"):
        data=datasets.load_diabetes()
        
    if(dataset_name=="Iris Dataset"):
        data=datasets.load_iris()
    elif(dataset_name=="Breast Canser Dataset"):
        data=datasets.load_breast_cancer()
    else:
        data=datasets.load_wine()
    x=data.data
    y=data.target
    feture_data=data.feature_names

    return x,y,feture_data


#discribing dataset
x,y,feture_data=data=get_dataset(dataset_name)
df = pd.DataFrame(data=x, columns=feture_data)

st.write("shape of data set",x.shape)
st.write("number of classes",len(np.unique(y)))

#pandas propiling report
show=st.checkbox('show dataset report')

if show :
    

    @st.cache(allow_output_mutation=True)
    def profile_builder(dataset_name,df):
        if(dataset_name=="Iris Dataset"):
            profile = ProfileReport(df,

                            title="Iris Dataset",

            dataset={

            "description": "This profiling report was generated by Prsanna sakarkar",

            "copyright_holder": "Prasanna Sakarkar",

            "copyright_year": "2022",

            

        },)
        elif(dataset_name=="Breast Canser Dataset"):
            profile = ProfileReport(df,

                            title="Breast Canser Dataset",

            dataset={

            "description": "This profiling report was generated by Prsanna sakarkar",

            "copyright_holder": "Prasanna Sakarkar",

            "copyright_year": "2022",

            

        },)
        elif(dataset_name=="Diabetes DAataset"):
            profile = ProfileReport(df,

                            title="Diabetes DAataset",

            dataset={

            "description": "This profiling report was generated by Prsanna sakarkar",

            "copyright_holder": "Prasanna Sakarkar",

            "copyright_year": "2022",

            

        },)
        else:
            profile = ProfileReport(df,

                            title="wine dataset",

            dataset={

            "description": "This profiling report was generated by Prsanna sakarkar",

            "copyright_holder": "Prasanna Sakarkar",

            "copyright_year": "2022",

            

        },)
        

        return profile
if show:
    profile=profile_builder(dataset_name,df)
    st_profile_report(profile)

    






#adding differet parameter according to clasifier
def add_parameter_ui(classifier_name):
    params={}
    if classifier_name=="KNN":
        k=st.sidebar.slider("k",1,15)
        params["k"]=k
    elif classifier_name=="SVM":
        c=st.sidebar.slider("c",0.01,10.0)
        params["c"]=c
    else:
        max_depth=st.sidebar.slider("max_depth",2,15)
        n_estimatours=st.sidebar.slider("n_estimatours",1,100)
        params["max_depth"]=max_depth
        params["n_estimatoure"]=n_estimatours
    

    return params

params=add_parameter_ui(classifier_name)

#fitting classification

def get_classifier(classifier_name,params):
     if classifier_name=="KNN":
        clf=KNeighborsClassifier(n_neighbors=params["k"])
     elif classifier_name=="SVM":
        clf=SVC(C=params["c"])
     else:
         clf=RandomForestClassifier(n_estimators=params["n_estimatoure"],max_depth=params["max_depth"],random_state=1234)
    
     return clf

clf=get_classifier(classifier_name,params)

#classification

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1234)

clf.fit(x_train,y_train)
y_pred=clf.predict(x_test)

accuracy=accuracy_score(y_test,y_pred)
st.write(f"classifire ={classifier_name}")
st.write(f"accuracy ={accuracy}")

#plot
pca=PCA(2)
x_projected=pca.fit_transform(x)

x1=x_projected[:,0]
x2=x_projected[:,1]

fig=plt.figure()
plt.scatter(x1,x2,c=y,alpha=0.8,cmap="viridis")
plt.xlabel("principal componunt =1")
plt.ylabel("principal componunt =2")
plt.colorbar()

#pltshow
st.set_option('deprecation.showPyplotGlobalUse', False)  #for warning as st.pyplot has no aurgument
st.pyplot()

